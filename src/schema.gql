scalar Date

scalar JSON

# Information about the service
type Info {
  # A globally unique identifier for the serivce
  id: String
  # The human readable name for the service
  name: String
  # A description of the service's capabilities
  description: String
  # The Service Readiness Level (SRL) of the service
  serviceReadinessLevel: Int
}

enum CompanyPosition {
  CS
  SALES
  OFFICE
  IT
  HR
  DEV
  PM
  AR
  QA
}

type Employee {
  # Kind fields
  id: ID! # internal identifier (unique)
  name: String # external identifier (non-unique)
  givenName: String
  familyName: String
  position: CompanyPosition!
  tenure: Tenure!
}

input TenureInput {
  start: Date!
  end: Date
}

type Tenure {
  start: Date!
  end: Date
}

# Create a Employee instance
input EmployeeInput {
  id: ID # if known, otherwise one will be generated
  tenure: TenureInput!
  name: String!
  position: CompanyPosition!
}

# Standard queries (instance and batch)
type Query {
  info: Info!
  tenure1: Tenure!
  employee1: [Employee!]!
}

# # Standard mutations (instance and batch)
# type Mutation {
#   addPerson(input: PersonInput): ID
#   updatePerson(input: PersonInput): ID
#   deletePerson(id: ID!): Person
# }

# # Standard events
# type PersonEvent {
#   id: ID
#   name: String
#   givenName: String
#   familyName: String
#   dateOfBirth: Date
# }

# type Subscription {
#   personAdded: PersonEvent!
#   personUpdated: PersonEvent!
#   personDeleted: PersonEvent!
# }
